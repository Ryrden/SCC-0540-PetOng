--ORACLE SQL

/* Observações de implmentação + dúvidas

    1) Com relação aos tipos para dados basicos (CEP, NUMERO, TELEFONE, etc), qual seria a quantidade ideal
    de caracteres para cada um? (ex: CEP = 8, NUMERO = 5, TELEFONE = 11) e o seus tipos (VARCHAR, NUMBER)

    2) CHECK em duas tabelas para garantir consistência ou apenas uma? (ocorre no caso Voluntario e Tipo Voluntario)

    3) Constraint da Unique key, qual a boa prática?? SK, TK, FK, ou UK1, UK2, UK3, etc?

    4) Regex para validar uma data é uma boa ideia?
*/

/* CONVEÇÕES ADOTADAS

    CPF: XXX.XXX.XXX-XX
    CNPJ: XX.XXX.XXX/XXXX-XX
    CRM: XXX/XX XXXXXX  -- Está certo??

    DATA: DD/MM/AAAA
    CEP: XXXXX-XXX

    TELEFONE: (XX) XXXXX-XXXX
    EMAIL: foo.bar@gmail.com || alguem@orgao.uf.gov.br || etc
*/


CREATE TABLE VOLUNTARIO (
    CPF CHAR(11) NOT NULL,
    NOME VARCHAR2(50) NOT NULL,
    DATA_NASCIMENTO DATE NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    TELEFONE CHAR(11) NOT NULL,
    TIPO VARCHAR2(12) NOT NULL,

    CONSTRAINT PK_VOLUNTARIO PRIMARY KEY (CPF),
    CONSTRAINT SK_VOLUNTARIO UNIQUE (EMAIL, TELEFONE),
    CONSTRAINT CHECK_VOLUNTARIO_CPF CHECK REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}-[0-9]{2}'),
    CONSTRAINT CHECK_VOLUNTARIO_DATA_NASCIMENTO 
        CHECK DATA_NASCIMENTO < SYSDATE AND REGEXP_LIKE(DATA_NASCIMENTO, '[0-9]{2}/[0-9]{2}/[0-9]{4}'), --faz sentido checar data?
    CONSTRAINT CHECK_VOLUNTARIO_TEL CHECK REGEXP_LIKE(TELEFONE, '\([0-9]{2}\) [0-9]{5}-[0-9]{4}'),
    CONSTRAINT CHECK_VOLUNTARIO_EMAIL CHECK REGEXP_LIKE(EMAIL, '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}'),
    CONSTRAINT CHECK_VOLUNTARIO_TIPO CHECK (UPPER(TIPO) IN ('AMADOR', 'PROFISSIONAL')),
)

CREATE TABLE TIPO_VOLUNTARIO (
    VOLUNTARIO CHAR(11) NOT NULL,
    TIPO VARCHAR2(12) NOT NULL,

    CONSTRAINT PK_TIPO_VOLUNTARIO PRIMARY KEY (VOLUNTARIO, TIPO),
    CONSTRAINT FK_TIPO_VOLUNTARIO FOREIGN KEY (VOLUNTARIO) 
        REFERENCES VOLUNTARIO(CPF) ON DELETE CASCADE,
    CONSTRAINT CHECK_TIPO_VOLUNTARIO CHECK (UPPER(TIPO) IN ('AMADOR', 'PROFISSIONAL')), -- Verificar se é necessário
)

CREATE TABLE VOLUNTARIO_AMADOR (
    VOLUNTARIO CHAR(11) NOT NULL, --seguindo a modelagem, chamamos de voluntário, mas deveriamos seguir a consistencia de nomes?
    CEP CHAR(9) NOT NULL,
    NUMERO NUMBER NOT NULL,
    COMPLEMENTO VARCHAR2(50) NOT NULL,

    CONSTRAINT PK_VOLUNTARIO_AMADOR PRIMARY KEY (CPF),
    CONSTRAINT FK_VOLUNTARIO_AMADOR FOREIGN KEY (CPF) 
        REFERENCES VOLUNTARIO(CPF) ON DELETE CASCADE,
    CONSTRAINT CHECK_VOLUNTARIO_AMADOR_CEP CHECK REGEXP_LIKE(CEP, '[0-9]{5}-[0-9]{3}'),
)

CREATE TABLE VOLUNTARIO_PROFISSIONAL (
    VOLUNTARIO CHAR(11) NOT NULL,
    CRM VARCHAR2(10) NOT NULL,

    CONSTRAINT PK_VOLUNTARIO_PROFISSIONAL PRIMARY KEY (VOLUNTARIO)
    CONSTRAINT SK_VOLUNTARIO_PROFISSIONAL UNIQUE (CRM),
    CONSTRAINT FK_VOLUNTARIO_PROFISSIONAL FOREIGN KEY (VOLUNTARIO) 
        REFERENCES VOLUNTARIO(CPF) ON DELETE CASCADE,
    CONSTRAINT CHECK_VOLUNTARIO_PROFISSIONAL CHECK REGEXP_LIKE(CRM, '[0-9]{3}/[0-9]{2} [0-9]{6}'),
)

CREATE TABLE ACAO_PROFISSIONAL (
    VOLUNTARIO CHAR(11) NOT NULL, --dei o nome de voluntario p/ garantir consistência (poderia ser profissional)
    DATA DATE NOT NULL,
    DESCRICAO VARCHAR2(50) NOT NULL,

    CONSTRAINT PK_ACAO_PROFISSIONAL PRIMARY KEY (VOLUNTARIO, DATA),
    CONSTRAINT FK_ACAO_PROFISSIONAL FOREIGN KEY (VOLUNTARIO) 
        REFERENCES VOLUNTARIO_PROFISSIONAL(CPF) ON DELETE CASCADE, --Referenciar Voluntario profissional ou voluntario?
)

CREATE TABLE ACAO_VOLUNTARIA ( --Acao amadora?
    VOLUNTARIO CHAR(11) NOT NULL,
    DATA DATE NOT NULL,
    DESCRICAO VARCHAR2(50) NOT NULL,

    CONSTRAINT PK_ACAO_VOLUNTARIA PRIMARY KEY (VOLUNTARIO, DATA),
    CONSTRAINT FK_ACAO_VOLUNTARIA FOREIGN KEY (VOLUNTARIO) 
        REFERENCES VOLUNTARIO_AMADOR(CPF) ON DELETE CASCADE,
)

CREATE TABLE DINHEIRO_ARRECADADO (
    VOLUNTARIO CHAR(11) NOT NULL,
    DATA DATE NOT NULL,
    VALOR NUMBER NOT NULL,

    CONSTRAINT PK_DINHEIRO_ARRECADADO PRIMARY KEY (VOLUNTARIO, DATA),
    CONSTRAINT FK_DINHEIRO_ARRECADADO FOREIGN KEY (VOLUNTARIO)
        REFERENCES VOLUNTARIO_AMADOR(CPF) ON DELETE CASCADE,
    CONSTRAINT CHECK_DINHEIRO_ARRECADADO_VALOR CHECK (VALOR > 0),
)

CREATE TABLE PRODUTO_DOADO (
    VOLUNTARIO CHAR(11) NOT NULL,
    DATA DATE NOT NULL,
    TIPO VARCHAR2(50) NOT NULL,
    NOME VARCHAR2(50) NOT NULL,
    QUALIDADE VARCHAR2(50),
    QUANTIDADE NUMBER NOT NULL,
    MARCA VARCHAR2(50),
    PORTE_DESTINO VARCHAR2(50) NOT NULL,

    CONSTRAINT PK_PRODUTO_DOADO PRIMARY KEY (VOLUNTARIO, DATA),
    CONSTRAINT FK_PRODUTO_DOADO FOREIGN KEY (VOLUNTARIO)
        REFERENCES VOLUNTARIO_AMADOR(CPF) ON DELETE CASCADE,
    CONSTRAINT CHECK_PRODUTO_DOADO_QUANTIDADE CHECK (QUANTIDADE > 0),
)

CREATE TABLE EVENTO (
    NOME VARCHAR2(50) NOT NULL,
    DATA DATE NOT NULL,
    CEP CHAR(9) NOT NULL,
    NUMERO NUMBER NOT NULL,
    COMPLEMENTO VARCHAR2(50) NOT NULL,

    CONSTRAINT PK_EVENTO PRIMARY KEY (DATA, CEP),
    CONSTRAINT CHECK_EVENTO_CEP CHECK REGEXP_LIKE(CEP, '[0-9]{5}-[0-9]{3}'),
)

--O membro é quase um voluntario...
CREATE TABLE MEMBRO (
    CPF CHAR(11) NOT NULL,
    NOME VARCHAR2(50) NOT NULL,
    DATA_NASCIMENTO DATE NOT NULL,
    EMAIL VARCHAR2(50) NOT NULL,
    TELEFONE CHAR(11) NOT NULL,
    CEP CHAR(9) NOT NULL,
    NUMERO NUMBER NOT NULL,
    COMPLEMENTO VARCHAR2(50) NOT NULL,

    CONSTRAINT PK_MEMBRO PRIMARY KEY (CPF),
    CONSTRAINT CHECK_MEMBRO_CPF CHECK REGEXP_LIKE(CPF, '[0-9]{3}\.[0-9]{3}\.[0-9]{3}-[0-9]{2}'),
    CONSTRAINT CHECK_MEMBRO_DATA_NASCIMENTO 
        CHECK DATA_NASCIMENTO < SYSDATE AND REGEXP_LIKE(DATA_NASCIMENTO, '[0-9]{2}/[0-9]{2}/[0-9]{4}'),
    CONSTRAINT CHECK_MEMBRO_TEL CHECK REGEXP_LIKE(TELEFONE, '\([0-9]{2}\) [0-9]{5}-[0-9]{4}'),
    CONSTRAINT CHECK_MEMBRO_EMAIL CHECK REGEXP_LIKE(EMAIL, '[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}'),
    CONSTRAINT CHECK_MEMBRO_CEP CHECK REGEXP_LIKE(CEP, '[0-9]{5}-[0-9]{3}'),
)

-- TABELA N:N
CREATE TABLE EVENTO_ORGANIZADO (
    DATA DATE NOT NULL,
    LOCAL CHAR(9) NOT NULL,
    MEMBRO CHAR(11) NOT NULL, --esse cara é um organizador

    CONSTRAINT PK_EVENTO_ORGANIZADO PRIMARY KEY (DATA, LOCAL, MEMBRO),
    CONSTRAINT FK_EVENTO_ORGANIZADO FOREIGN KEY (DATA, LOCAL) 
        REFERENCES EVENTO(DATA, CEP) ON DELETE CASCADE,
    CONSTRAINT FK_EVENTO_ORGANIZADO_MEMBRO FOREIGN KEY (MEMBRO) 
        REFERENCES MEMBRO(CPF) ON DELETE CASCADE,
)